#!/usr/bin/python
import os
import sys

env = Environment(ENV = os.environ)

env.Append(CPPPATH = ['/usr/local/include', '/opt/local/include'])
env.Append(LIBPATH = ['/opt/local/lib'])
env.Append(CCFLAGS = '-std=c++11 -D_GNU_SOURCE')

conf = env.Configure(config_h = "config.h")
conf.Define("__STDC_FORMAT_MACROS")
if not conf.CheckCXX():
    print "A compiler with C++11 support is required."
    Exit(1)
print "Checking for gengetopt...",
if env.Execute("@which gengetopt &> /dev/null"):
    print "not found (required)"
    Exit(1)
else: print "found"
if not conf.CheckLibWithHeader("pthread", "pthread.h", "C++"):
    print "pthread required"
    Exit(1)
conf.CheckLibWithHeader("zmq", "zmq.hpp", "C++")

env = conf.Finish()

env.Append(CFLAGS = ' -O3 -Wall -g')
env.Append(CPPFLAGS = ' -O3 -Wall -g')

src = Split("TopLevelController.cc CoreMemController.cc Cores.cc LLC.cc Util.cc")


env.Program(target='Heracles', source=src)
env.Program(target='TestCores', source=["TestCores.cc", "Cores.cc", "Util.cc"])
env.Program(target='TestLLC', source=["TestLLC.cc", "LLC.cc", "Util.cc"])
